#cloud-config
users:
  - name: dev
    groups: 
      - sudo
      - docker
    lock_passwd: false
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC7ILtUCLfNRal1DCZHss9Qvux3Hdf5q9EGuPjxW5aui6GIU1Ry56zipakjRVAjTycvBpLf5DiqbfbwzwkaScw16Xv5RcGQgXpE4UImwDChd+VKno2n1sDLYkjlTdZoQL13pP+XrPJADmpjkIZLoefh0P7DJaIKRZEW2hPTN3W4o1fdjCNCZoi6x08JKkxLty5BUenW2bBAxIf5m07KTLTfTYDJXWOiEL/+D6WMmujykX1gHVUTJ5rswBfjarq1Qjc7Tw+fGLHTnrmPZMKVoPigg2qEt0pAbIPEWpdvfrrHG857d2tWvqnBdjxMAL56T2Yl3o39LbMxrjHrPWMwr5ZE+U7gpcR5lUhycVhNTC7Ip+38Qgd7M+q9bYPAI7HMy5qF0i/IWgazjr61+nEQoGkFD3u0ZchPxynNmbWiHr7UOxvWCcnJqU0f0MUuiZAqi1+qUNm+oURd/F1OVNXt+GGHqE2Ej34P51XldFrKyOYYl6AxMBp0LN86cHfIGAJKx+k= gmx\014961866@IBM-PF36VNNY


pacakge_update: true
package_upgrade: true
packages:
  - jq 
  - curl
  - software-properties-common  

write_files:
- path: /config/provision-root.sh
  permissions: '0744'    
  content: |
    #!/usr/bin/env bash
    set -ex
    # set -o errexit
    # set -o pipefail

    if [ -z $1 ]; then
      HLF_VERSION=2.2.0
    else
      HLF_VERSION=$1
    fi

    if [ ${HLF_VERSION:0:4} = '2.4.' ]; then
      export GO_VERSION=1.17.10
    elif [ ${HLF_VERSION:0:4} = '2.2.' -o ${HLF_VERSION:0:4} = '2.3.' ]; then
      export GO_VERSION=1.14.11
    elif [ ${HLF_VERSION:0:4} = '2.0.' -o ${HLF_VERSION:0:4} = '2.1.' ]; then
      export GO_VERSION=1.13.15
    elif [ ${HLF_VERSION:0:4} = '1.2.' -o ${HLF_VERSION:0:4} = '1.3.' -o ${HLF_VERSION:0:4} = '1.4.' ]; then
      export GO_VERSION=1.10.4
    elif [ ${HLF_VERSION:0:4} = '1.1.' ]; then
      export GO_VERSION=1.9.7
    else
      >&2 echo "Unexpected HLF_VERSION ${HLF_VERSION}"
      >&2 echo "HLF_VERSION must be a 1.1.x, 1.2.x, 1.3.x, 1.4.x, 2.0.x, 2.1.x, 2.2.x, 2.3.x, or 2.4.x version"
      exit 1
    fi


    # APT setup for kubectl
    curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
   
    # Install kubectl
    apt-get -y --no-upgrade install kubectl

    # Install yq
    YQ_VERSION=4.23.1
    if [ ! -x "/usr/local/bin/yq" ]; then
      curl --fail --silent --show-error -L "https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64" -o /usr/local/bin/yq
      chmod 755 /usr/local/bin/yq
    fi

    # Install docker compose
    if [ ! -x /usr/local/bin/docker-compose ]; then
      curl --fail --silent --show-error -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      chmod 755 /usr/local/bin/docker-compose
    fi

    # Install kind
    KIND_VERSION=0.14.0
    if [ ! -x "/usr/local/bin/kind" ]; then
      curl --fail --silent --show-error -L "https://kind.sigs.k8s.io/dl/v${KIND_VERSION}/kind-linux-amd64" -o /usr/local/bin/kind
      chmod 755 /usr/local/bin/kind
    fi

    # Install k9s
    K9S_VERSION=0.25.3
    if [ ! -x "/usr/local/bin/k9s" ]; then
      curl --fail --silent --show-error -L "https://github.com/derailed/k9s/releases/download/v${K9S_VERSION}/k9s_Linux_x86_64.tar.gz" -o "/tmp/k9s_Linux_x86_64.tar.gz"
      tar -zxf "/tmp/k9s_Linux_x86_64.tar.gz" -C /usr/local/bin k9s
      chown root:root /usr/local/bin/k9s
      chmod 755 /usr/local/bin/k9s
    fi

    # Install ccmetadata
    CCMETADATA_VERSION=0.2.0
    if [ ! -x "/usr/local/bin/ccmetadata" ]; then
      curl --fail --silent --show-error -L "https://github.com/hyperledgendary/ccmetadata/releases/download/v${CCMETADATA_VERSION}/ccmetadata-Linux-X64.tgz" -o "/tmp/ccmetadata-Linux-X64.tgz"
      tar -zxf "/tmp/ccmetadata-Linux-X64.tgz" -C /usr/local/bin ccmetadata
      chown root:root /usr/local/bin/ccmetadata
      chmod 755 /usr/local/bin/ccmetadata
    fi

- path: /config/provision-user.sh
  permissions: '0777'
  owner: dev:dev
  content: |
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] || curl --fail --silent --show-error -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh | bash
    . "$NVM_DIR/nvm.sh"

runcmd:
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
  - add-apt-repository "deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  - apt-get update -y
  - apt-get install -y docker-ce docker-ce-cli containerd.io
  - systemctl start docker
  - systemctl enable docker
  - /config/provision-root.sh
  - su -c /config/provision-user.sh dev

final_message: "The system is finally up, after $UPTIME seconds"  
